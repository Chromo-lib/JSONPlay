[{"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\App.js":"1","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\ListHistory.js":"2","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\Output.js":"3","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\Sender.js":"4","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\SplitWrapper.js":"5","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\index.js":"6","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\state\\GlobalProvider.js":"7","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\utils\\formatSize.js":"8","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\utils\\LocalHistory.js":"9","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\Spinner.js":"10","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\utils\\formatNumber.js":"11"},{"size":733,"mtime":1612205673089,"results":"12","hashOfConfig":"13"},{"size":2587,"mtime":1612205984167,"results":"14","hashOfConfig":"13"},{"size":2956,"mtime":1612207077688,"results":"15","hashOfConfig":"13"},{"size":2176,"mtime":1612202340339,"results":"16","hashOfConfig":"13"},{"size":638,"mtime":1612204998998,"results":"17","hashOfConfig":"13"},{"size":321,"mtime":1612204410218,"results":"18","hashOfConfig":"13"},{"size":771,"mtime":1612204538905,"results":"19","hashOfConfig":"13"},{"size":218,"mtime":1606064866310,"results":"20","hashOfConfig":"13"},{"size":583,"mtime":1612201670234,"results":"21","hashOfConfig":"13"},{"size":317,"mtime":1612203559097,"results":"22","hashOfConfig":"13"},{"size":132,"mtime":1612207092916,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"26lr14",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\App.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\ListHistory.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\Output.js",["47"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { GlobalContext } from '../state/GlobalProvider';\r\nimport axios from 'axios';\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-json5\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\n\r\nimport formatSize from '../utils/formatSize';\r\nimport LocalHistory from '../utils/LocalHistory';\r\nimport Spinner from './Spinner';\r\nimport formatNumber from '../utils/formatNumber';\r\n\r\nexport default function Output () {\r\n\r\n  const { globalState, setGlobalState } = useContext(GlobalContext);\r\n  const [state, setState] = useState({ output: '', headers: '', errors: '' });\r\n  const [currentTab, setCurrentTab] = useState('output');\r\n\r\n  useEffect(() => {\r\n    const { url, method, data, isDataSubmitted } = globalState.sender;\r\n\r\n    if (isDataSubmitted) {\r\n      let startTime = Date.now();\r\n      let options = { url, method };\r\n\r\n      if (data && Object.keys(data).length > 0) {\r\n        options = { url, method, data: data };\r\n      }\r\n\r\n      let sender = { ...globalState.sender, isDataSubmitted: false };\r\n\r\n      axios(options)\r\n        .then(rsp => {\r\n          let tmpH = globalState.history.slice(0);\r\n\r\n          if (!tmpH.find(h => h.sender.method === options.method && h.url === options.url)) {\r\n            let req = { sender, url: options.url, date: new Date().toString() };\r\n            tmpH.unshift(req);\r\n            LocalHistory.add(req);\r\n          }\r\n\r\n          setGlobalState({\r\n            ...globalState,\r\n            sender,\r\n            history: tmpH,\r\n            infos: {\r\n              status: rsp.status,\r\n              statusText: rsp.statusText,\r\n              time: formatNumber(Date.now() - startTime),\r\n              size: formatSize(JSON.stringify(rsp.data).length)\r\n            }\r\n          });\r\n\r\n          setState({\r\n            output: rsp.data,\r\n            headers: rsp.headers,\r\n            errors: ''\r\n          });\r\n        })\r\n        .catch(e => {\r\n          setState({ ...state, errors: e });\r\n          setGlobalState({ ...globalState, sender });\r\n        });\r\n    }\r\n  }, [globalState.sender.isDataSubmitted, globalState.sender.url]);\r\n\r\n  const onTab = tabName => {\r\n    setCurrentTab(tabName);\r\n  }\r\n\r\n  return (<div className=\"container\">\r\n    <header>\r\n      {Object.keys(state).map((tabName) => {\r\n        return <span className={\"badge \" + (tabName === currentTab ? 'txt-white' : '')}\r\n          key={tabName} onClick={() => { onTab(tabName) }}>{tabName}</span>\r\n      })}\r\n    </header>\r\n\r\n    <div className=\"content p-0\">\r\n      <AceEditor\r\n        mode=\"json5\"\r\n        theme=\"monokai\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        value={JSON.stringify(state[currentTab], '\\n', 2)}\r\n        name=\"ace-json-editor\"\r\n        editorProps={{ $blockScrolling: true }}\r\n        highlightActiveLine={false}\r\n      />\r\n    </div>\r\n\r\n    {globalState.sender.isDataSubmitted && <Spinner />}\r\n  </div>);\r\n}","C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\Sender.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\SplitWrapper.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\index.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\state\\GlobalProvider.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\utils\\formatSize.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\utils\\LocalHistory.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\components\\Spinner.js",[],"C:\\Users\\haike\\Documents\\browser-extensions\\1-completed\\jsonplay\\src\\utils\\formatNumber.js",[],{"ruleId":"48","severity":1,"message":"49","line":65,"column":6,"nodeType":"50","endLine":65,"endColumn":66,"suggestions":"51"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'globalState', 'setGlobalState', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["52"],{"desc":"53","fix":"54"},"Update the dependencies array to be: [globalState, globalState.sender.isDataSubmitted, globalState.sender.url, setGlobalState, state]",{"range":"55","text":"56"},[2114,2174],"[globalState, globalState.sender.isDataSubmitted, globalState.sender.url, setGlobalState, state]"]